# video_selector.py
import json
import datetime
from yt_dlp import YoutubeDL
from pathlib import Path
import random

# Categories and search terms
video_categories = {
    "mrbeast": "mrbeast shorts",
    "fun": "funny stories generated by ai",
    "horror": "horror story ai generated",
    "football": "football crazy moments",
    "cricket": "cricket insane catches"
}

DATA_DIR = Path("Data")
DATA_DIR.mkdir(exist_ok=True)

VIDEO_DATA_PATH = DATA_DIR / "daily_video_list.json"
SEEN_IDS_PATH = DATA_DIR / "seen_ids.json"

YDL_OPTIONS = {
    'quiet': True,
    'extract_flat': 'in_playlist',
    'skip_download': True,
    'forcejson': True,
}

# Load seen IDs
if SEEN_IDS_PATH.exists():
    with open(SEEN_IDS_PATH, "r") as f:
        seen_ids = set(json.load(f))
else:
    seen_ids = set()

print("üîç Collecting 1 video from each category...\n")

selected_videos = []

for category, search_query in video_categories.items():
    query = f"ytsearch10:{search_query}"
    try:
        with YoutubeDL(YDL_OPTIONS) as ydl:
            info = ydl.extract_info(query, download=False)
            entries = info.get("entries", [])
            for entry in entries:
                video_id = entry.get("id")
                if video_id not in seen_ids:
                    seen_ids.add(video_id)
                    selected_videos.append({
                        "title": entry.get("title", f"{category}_video"),
                        "url": f"https://www.youtube.com/watch?v={video_id}",
                        "category": category,
                        "start": random.randint(10, 40),
                        "end": None,
                        "fetched_at": datetime.datetime.now().isoformat()
                    })
                    break
            else:
                print(f"‚ö†Ô∏è No new video found for: {category}")
    except Exception as e:
        print(f"‚ùå Error: {category} | {e}")

# Add end time and save
for video in selected_videos:
    video["end"] = video["start"] + 20  # 20 sec shorts

with open(VIDEO_DATA_PATH, "w", encoding="utf-8") as f:
    json.dump(selected_videos, f, indent=2, ensure_ascii=False)

with open(SEEN_IDS_PATH, "w", encoding="utf-8") as f:
    json.dump(list(seen_ids), f, indent=2)

print(f"\n‚úÖ Saved {len(selected_videos)} videos to {VIDEO_DATA_PATH}")
